////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Framework.vf
// /___/   /\     Timestamp : 11/23/2016 18:27:27
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family kintex7 -verilog E:/3150104945/Framework_ALU/Framework.vf -w E:/3150104945/Framework_ALU/Framework.sch
//Design Name: Framework
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module MUX2T1_64_MUSER_Framework(a, 
                                 b, 
                                 sel, 
                                 o);

    input [63:0] a;
    input [63:0] b;
    input sel;
   output [63:0] o;
   
   wire [2:0] s;
   
   MUX8T1_32  XLXI_1 (.I0(b[31:0]), 
                     .I1(a[31:0]), 
                     .I2(), 
                     .I3(), 
                     .I4(), 
                     .I5(), 
                     .I6(), 
                     .I7(), 
                     .s(s[2:0]), 
                     .o(o[31:0]));
   MUX8T1_32  XLXI_2 (.I0(b[63:32]), 
                     .I1(a[63:32]), 
                     .I2(), 
                     .I3(), 
                     .I4(), 
                     .I5(), 
                     .I6(), 
                     .I7(), 
                     .s(s[2:0]), 
                     .o(o[63:32]));
   BUF  XLXI_3 (.I(sel), 
               .O(s[0]));
   GND  XLXI_4 (.G(s[2]));
   GND  XLXI_5 (.G(s[1]));
endmodule
`timescale 1ns / 1ps

module Display_MUSER_Framework(clk, 
                               flash, 
                               Hexs, 
                               LES, 
                               point, 
                               rst, 
                               Start, 
                               SW0, 
                               seg_clk, 
                               seg_clrn, 
                               SEG_PEN, 
                               seg_sout);

    input clk;
    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input rst;
    input Start;
    input SW0;
   output seg_clk;
   output seg_clrn;
   output SEG_PEN;
   output seg_sout;
   
   wire [63:0] XLXN_8;
   wire [63:0] XLXN_9;
   wire [63:0] XLXN_10;
   
   P2S  XLXI_1 (.clk(clk), 
               .P_Data(XLXN_8[63:0]), 
               .rst(rst), 
               .Serial(Start), 
               .EN(SEG_PEN), 
               .sout(seg_sout), 
               .s_clk(seg_clk), 
               .s_clrn(seg_clrn));
   MUX2T1_64_MUSER_Framework  XLXI_2 (.a(XLXN_9[63:0]), 
                                     .b(XLXN_10[63:0]), 
                                     .sel(SW0), 
                                     .o(XLXN_8[63:0]));
   HexTo8SEG  XLXI_3 (.flash(flash), 
                     .Hexs(Hexs[31:0]), 
                     .LES(LES[7:0]), 
                     .points(point[7:0]), 
                     .SEG_TXT(XLXN_9[63:0]));
   Sseg_map  XLXI_4 (.Disp_num({Hexs[31:0], Hexs[31:0]}), 
                    .Seg_map(XLXN_10[63:0]));
endmodule
`timescale 1ns / 1ps

module Framework(clk_100mhz, 
                 K_COL, 
                 RSTN, 
                 SW, 
                 Buzzer, 
                 CR, 
                 K_ROW, 
                 LEDCLK, 
                 LEDCLR, 
                 LEDDT, 
                 LEDEN, 
                 RDY, 
                 readn, 
                 SEGCLK, 
                 SEGCLR, 
                 SEGDT, 
                 SEGEN);

    input clk_100mhz;
    input [3:0] K_COL;
    input RSTN;
    input [15:0] SW;
   output Buzzer;
   output CR;
   output [4:0] K_ROW;
   output LEDCLK;
   output LEDCLR;
   output LEDDT;
   output LEDEN;
   output RDY;
   output readn;
   output SEGCLK;
   output SEGCLR;
   output SEGDT;
   output SEGEN;
   
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire Co;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire G0;
   wire [7:0] LE_out;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire rst;
   wire [15:0] SW_OK;
   wire V5;
   wire [4:0] XLXN_70;
   wire [31:0] XLXN_71;
   wire [31:0] XLXN_72;
   wire [31:0] XLXN_79;
   wire zero;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   SAnti_jitter  XLXI_1 (.clk(clk_100mhz), 
                        .Key_y(K_COL[3:0]), 
                        .readn(readn_DUMMY), 
                        .RSTN(RSTN), 
                        .SW(SW[15:0]), 
                        .BTN_OK(BTN_OK[3:0]), 
                        .CR(CR), 
                        .Key_out(XLXN_70[4:0]), 
                        .Key_ready(RDY_DUMMY), 
                        .Key_x(K_ROW[4:0]), 
                        .pulse_out(Pulse[3:0]), 
                        .rst(rst), 
                        .SW_OK(SW_OK[15:0]));
   clkdiv  XLXI_2 (.clk(clk_100mhz), 
                  .rst(rst), 
                  .clkdiv(Div[31:0]));
   SEnter_2_32  XLXI_3 (.BTN(BTN_OK[2:0]), 
                       .clk(clk_100mhz), 
                       .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                       .Din(XLXN_70[4:0]), 
                       .D_ready(RDY_DUMMY), 
                       .Ai(XLXN_71[31:0]), 
                       .Bi(XLXN_72[31:0]), 
                       .blink(blink[7:0]), 
                       .readn(readn_DUMMY));
   Display_MUSER_Framework  XLXI_4 (.clk(clk_100mhz), 
                                   .flash(Div[25]), 
                                   .Hexs(Disp_num[31:0]), 
                                   .LES(LE_out[7:0]), 
                                   .point(point_out[7:0]), 
                                   .rst(rst), 
                                   .Start(Div[20]), 
                                   .SW0(SW_OK[0]), 
                                   .seg_clk(SEGCLK), 
                                   .seg_clrn(SEGCLR), 
                                   .SEG_PEN(SEGEN), 
                                   .seg_sout(SEGDT));
   Multi_8CH32  XLXI_5 (.clk(clk_100mhz), 
                       .Data0(XLXN_71[31:0]), 
                       .data1(XLXN_72[31:0]), 
                       .data2(XLXN_79[31:0]), 
                       .data3(XLXN_79[31:0]), 
                       .data4(XLXN_79[31:0]), 
                       .data5(XLXN_79[31:0]), 
                       .data6(XLXN_79[31:0]), 
                       .data7(XLXN_79[31:0]), 
                       .EN(V5), 
                       .LES({G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, 
         blink[3:0], G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, 
         G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, 
         G0, blink[7:0], blink[7:0]}), 
                       .point_in({Div[31:0], Div[31:0]}), 
                       .rst(rst), 
                       .Test(SW_OK[7:5]), 
                       .Disp_num(Disp_num[31:0]), 
                       .LE_out(LE_out[7:0]), 
                       .point_out(point_out[7:0]));
   GPIO  XLXI_6 (.clk(clk_100mhz), 
                .EN(V5), 
                .P_Data({Div[25:0], Co, G0, G0, G0, G0, SW_OK[1]}), 
                .rst(rst), 
                .Start(Div[20]), 
                .GPIOf0(), 
                .led_clk(LEDCLK), 
                .led_clrn(LEDCLR), 
                .LED_PEN(LEDEN), 
                .led_sout(LEDDT));
   VCC  XLXI_7 (.P(V5));
   GND  XLXI_8 (.G(G0));
   BUF  XLXI_9 (.I(V5), 
               .O(Buzzer));
   ALU  XLXI_10 (.A(XLXN_71[31:0]), 
                .ALU_Ctr(SW_OK[4:2]), 
                .B(XLXN_72[31:0]), 
                .Co(Co), 
                .overflow(), 
                .res(XLXN_79[31:0]), 
                .zero(zero));
endmodule
